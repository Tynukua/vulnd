[Replay Attack]

Description:
A replay attack occurs when a valid transaction is maliciously or fraudulently repeated on the same or different blockchain. In Solidity, this often affects multi-chain deployments or poorly secured signing logic in meta-transactions or off-chain signatures.

Example:
contract Token {
    mapping(address => uint256) public balances;
    mapping(bytes32 => bool) public executed;

    function transferWithSig(address to, uint256 amount, uint8 v, bytes32 r, bytes32 s) public {
        bytes32 message = keccak256(abi.encodePacked(to, amount));
        address signer = ecrecover(message, v, r, s);

        require(signer != address(0), "Invalid signature");

        balances[signer] -= amount;
        balances[to] += amount;
    }
}

Problem:
The same signature can be replayed multiple times, since thereâ€™s no uniqueness (like nonce or timestamp). An attacker can reuse a previously signed message to drain tokens.

Fix:
Include a unique value (e.g., nonce or timestamp) in the signed message and store it to prevent reuse.

Fixed Example:
contract Token {
    mapping(address => uint256) public balances;
    mapping(bytes32 => bool) public executed;

    function transferWithSig(address to, uint256 amount, uint256 nonce, uint8 v, bytes32 r, bytes32 s) public {
        bytes32 message = keccak256(abi.encodePacked(to, amount, nonce));
        require(!executed[message], "Already executed");

        address signer = ecrecover(message, v, r, s);
        require(signer != address(0), "Invalid signature");

        executed[message] = true;
        balances[signer] -= amount;
        balances[to] += amount;
    }
}
