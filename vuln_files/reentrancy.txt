[Reentrancy Vulnerability]

Description:
A reentrancy attack happens when a contract makes an external call to another untrusted contract before it resolves its own internal logic. The untrusted contract can call back into the original function and exploit the inconsistent state.

Example:
function withdraw(uint amount) public {
    require(balances[msg.sender] >= amount);
    (bool success, ) = msg.sender.call{value: amount}("");
    require(success);
    balances[msg.sender] -= amount;
}

Fix:
Use Checks-Effects-Interactions pattern and `transfer` instead of `call` where possible.

Fixed Example:
function withdraw(uint amount) public {
    require(balances[msg.sender] >= amount);
    balances[msg.sender] -= amount;
    payable(msg.sender).transfer(amount);
}